/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ming.gcp;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Properties;
import java.util.Random;
import java.util.function.Supplier;

import com.google.auth.Credentials;
import com.google.auth.oauth2.GoogleCredentials;
import com.google.cloud.storage.Blob;
import com.google.cloud.storage.BlobId;
import com.google.cloud.storage.BlobInfo;
import com.google.cloud.storage.Bucket;
import com.google.cloud.storage.BucketInfo;
import com.google.cloud.storage.Storage;
import com.google.cloud.storage.StorageOptions;
import io.github.resilience4j.core.IntervalFunction;
import io.github.resilience4j.retry.Retry;
import io.github.resilience4j.retry.RetryConfig;
import io.github.resilience4j.retry.RetryRegistry;
import lombok.Data;

public class GCSRetry {

    private Retry retry;

    @Data
    static class Config {
        String credentialPath;
        String bucketName;
        String objectName;
        String objectPath;
    }

    public static Config loadConfig(final String configFile) throws IOException {
        Properties prop = new Properties();
        prop.load(new FileInputStream(configFile));
        Config config = new Config();
        config.bucketName = prop.getProperty("bucket_name");
        config.credentialPath = prop.getProperty("credentials_path");
        config.objectName = prop.getProperty("object_name");
        config.objectPath = prop.getProperty("object_path");
        return config;
    }

    public GCSRetry() {
        this.retry = this.initRetry();
    }

    static class RetryableException extends RuntimeException {
        public RetryableException(String message) {
            super(message);
        }
        public RetryableException(Exception e) {
            super(e);
        }
        public RetryableException(String message, Exception e) {
            super(message, e);
        }
    }

    public Storage createStorage(String credentialsPath) {
        try {
            Credentials credentials = GoogleCredentials
                    .fromStream(new FileInputStream(credentialsPath));
            return StorageOptions.newBuilder().setCredentials(credentials)
                    .build().getService();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public Bucket createBucket(Storage storage, String bucketName) {
        // Creates the new bucket
        Bucket bucket = storage.create(BucketInfo.of(bucketName));
        System.out.printf("Bucket %s created.%n", bucket.getName());
        return bucket;
    }

    public Blob uploadObject(Storage storage, String bucketName,
                             String objectName, String filePath) {
        BlobId blobId = BlobId.of(bucketName, objectName);
        BlobInfo blobInfo = BlobInfo.newBuilder(blobId).build();
        System.out.println(
                "File " + filePath + " uploaded to bucket " + bucketName + " as " + objectName);

        Random rand = new Random();
        if (rand.nextInt(8) > 1) {
            throw new RetryableException("Purposely thrown retryable exception");
        }
        try {
            return storage.create(blobInfo, Files.readAllBytes(Paths.get(filePath)));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
    private Retry initRetry() {
        RetryConfig config = RetryConfig.custom()
                .maxAttempts(3)
                .retryExceptions(RetryableException.class)
                .intervalFunction(IntervalFunction.ofExponentialRandomBackoff(1000, 2))
                .build();

        // Registry, Retry creation omitted
        RetryRegistry registry = RetryRegistry.of(config);
        Retry retry = registry.retry("uploadService", config);

        Retry.EventPublisher publisher = retry.getEventPublisher();
        publisher.onRetry(System.out::println);
        publisher.onSuccess(System.out::println);
        return retry;
    }

    private Blob retryUpload(Storage storage, String bucketName, String object_name, String file_path) {

        Supplier<Blob> uploadSupplier =
                () -> this.uploadObject(storage, bucketName, object_name, file_path);

        Supplier<Blob> retryingUpload =
                Retry.decorateSupplier(this.retry, uploadSupplier);

        return retryingUpload.get();
    }

    public static void main(String[] args) throws IOException {
        final String configFile = args[0];

        GCSRetry gcsRetry = new GCSRetry();
        Config cfg = gcsRetry.loadConfig(configFile);

        Storage storage = gcsRetry.createStorage(cfg.getCredentialPath());
//        Bucket bucket = app.createBucket(storage, bucketName);
        for (int i = 0; i < 10; i++) {
            Blob blob = gcsRetry.retryUpload(storage, cfg.getBucketName(), cfg.getObjectName() + System.currentTimeMillis(), cfg.getObjectPath());
            System.out.printf("blob: %s\n", blob);
        }
    }
}
